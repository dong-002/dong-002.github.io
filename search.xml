<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/04/08/untitled/"/>
      <url>/2023/04/08/untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>组件</title>
      <link href="/2023/03/31/zu-jian/"/>
      <url>/2023/03/31/zu-jian/</url>
      
        <content type="html"><![CDATA[<p>在vue中一个.vue文件就是一个组件，一般来说不会在一个文件写太多的代码，我们可以把重复使用的代码写到一个组件中，在另一个组件中引用这个被封装的组件，这样可以提高代码复用性。前一个组件叫做子组件，后一个叫做父组件。</p><h3 id="父组件中引用子组件"><a href="#父组件中引用子组件" class="headerlink" title="父组件中引用子组件"></a>父组件中引用子组件</h3><p>父组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;main&quot;&gt;    &lt;p&gt;I am father&lt;&#x2F;p&gt;    下面是子组件    &lt;Child&gt;直接在这里写内容是不会显示出来的&lt;&#x2F;Child&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import Child from &#39;.&#x2F;components&#x2F;Child.vue&#39; &#x2F;&#x2F;引入子组件&lt;&#x2F;script&gt;&lt;style scoped&gt; .main &#123;   width: 300px;   height: 300px;   border: 1px solid greenyellow; &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;shit&lt;&#x2F;div&gt;  &lt;!-- &lt;slot&gt;添加一个插槽父组件所写的内容才会显示在这里&lt;&#x2F;slot&gt; --&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;&lt;&#x2F;script&gt;&lt;style scoped&gt; div &#123;   width: 100px;   height: 100px;   border: 1px solid blueviolet; &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下，可以看到在父组件中引用了子组件。在<Child></Child>里面的内容不会显示。如果想要<Child></Child>中的内容显示，要在子组件中添加一个插槽<slot/>，内容会在插槽的位置显示。</p><p>定义了Child组件，我们可以在任意组件中引用这个组件。在同一个父组件中也可以多次使用子组件。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20230331111142694.png"></p><h3 id="父子数据传递"><a href="#父子数据传递" class="headerlink" title="父子数据传递"></a>父子数据传递</h3><p>组件定义的数据只能自己使用，但是不同组件之间想要传输数据怎么办呢？</p><p>在子组件中使用defineProps把要传递的属性暴露出去，这样父组件能够通过这个属性传递值给子组件。</p><blockquote><p>注意：父组件中的命名要和子组件中defineProps中的属性命名一样，即:num要和defineProps中的num属性名字一样。</p></blockquote><p>父组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;main&quot;&gt;    &lt;p&gt;I am father&lt;&#x2F;p&gt;    下面是子组件    &lt;Child :num&#x3D;&quot;son.num&quot;&gt;&lt;&#x2F;Child&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import Child from &#39;.&#x2F;components&#x2F;Child.vue&#39; &#x2F;&#x2F;引入子组件import &#123;reactive&#125; from &#39;vue&#39;const son&#x3D;reactive(&#123;  num: 123&#125;)&lt;&#x2F;script&gt;&lt;style scoped&gt; .main &#123;   width: 300px;   height: 300px;   border: 1px solid greenyellow; &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    这里是父组件传来的值：&#123;&#123;props.num&#125;&#125;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;const props&#x3D;defineProps(&#123;  num: &#123;    type: Number, &#x2F;&#x2F;定义了num的类型，如果从父组件中传递过来的数据不是number类型就报错    default: 0 &#x2F;&#x2F;默认值是0 如果父组件有值传过来就是传过来的，否则就是0  &#125;,  str: &#123;    type: String  &#125;&#125;)&lt;&#x2F;script&gt;&lt;style scoped&gt; div &#123;   width: 100px;   height: 100px;   border: 1px solid blueviolet; &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于props有一个简易的写法：（不过这样的写法不能定义数据类型和默认值）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script setup<span class="token operator">></span>  <span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">,</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>结果如下，:num&#x3D;”son.num”把数据num传递给子组件。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20230331130308021.png"></p><h3 id="子组件向父组件传递方法"><a href="#子组件向父组件传递方法" class="headerlink" title="子组件向父组件传递方法"></a>子组件向父组件传递方法</h3><p>组件之间不仅要传输数据，有时候还需要传递方法。</p><p>例如子组件是一个弹窗，当我想要它出现的时候点击一个按钮便弹出，当我不想要的时候就点击按钮把它关闭。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/%E7%A9%BA%E7%99%BD.png"></p><p>父组件</p><p>在父组件中写一个按钮，点击son.show变为true就会出现弹框</p><p>在<Child></Child>中的@closeSon名字要和子组件中暴露出的名字一样</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;main&quot;&gt;    &lt;p&gt;I am father&lt;&#x2F;p&gt;    &lt;button @click&#x3D;&quot;showSon&quot;&gt;show son&lt;&#x2F;button&gt;    &lt;Child @closeSon&#x3D;&quot;close&quot; v-show&#x3D;&quot;son.show&quot;&gt;&lt;&#x2F;Child&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import Child from &#39;.&#x2F;components&#x2F;Child.vue&#39; &#x2F;&#x2F;引入子组件import &#123;reactive&#125; from &#39;vue&#39;const son&#x3D;reactive(&#123;  title: &#39;shit&#39;,  show: false &#x2F;&#x2F;默认是false 弹框不出现&#125;)const showSon&#x3D;()&#x3D;&gt;&#123;  son.show&#x3D;true &#x2F;&#x2F;弹框出现&#125;&#x2F;&#x2F;子组件传来的方法 点击子组件中的按钮子组件就消失const close&#x3D;()&#x3D;&gt;&#123;  son.show&#x3D;false &#125;&lt;&#x2F;script&gt;&lt;style scoped&gt; .main &#123;   width: 300px;   height: 300px;   border: 1px solid greenyellow; &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件</p><p>子组件中使用defineEmits把方法暴露出去，注意名字要一样。</p><p>在子组件中点击按钮影响到父组件中的son.show变为false，弹框消失</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    &lt;button @click&#x3D;&quot;closeSon&quot;&gt;close&lt;&#x2F;button&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;&#x2F;&#x2F;使用defineEmits定义要传递的方法const emit&#x3D;defineEmits([&#39;closeSon&#39;])&#x2F;&#x2F; 写一个同名的方法const closeSon&#x3D;()&#x3D;&gt;&#123;  emit(&#39;closeSon&#39;) &#x2F;&#x2F;把它暴露给父组件&#125;&lt;&#x2F;script&gt;&lt;style scoped&gt; div &#123;   width: 100px;   height: 100px;   border: 1px solid blueviolet; &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下，当点击父组件中的按钮就会出现弹框，当点击子组件中的按钮弹框消失。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/GIF%202023-3-31%2015-50-05.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步</title>
      <link href="/2023/03/20/yi-bu-bian-cheng/"/>
      <url>/2023/03/20/yi-bu-bian-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><p>同步行为就是代码按照顺序执行，JavaScript是单线程的，如果某个操作需要的时间很长（例如向服务器发送请求），那么可以通过异步编程等待当前任务响应，然后继续执行后续的代码。当等待的任务有响应，再通过某种方式通知被调用者。</p><p>在代码执行过程中，遇到同步任务执行栈执行，遇到异步任务进行等待，往消息队列中插入一条消息。当后续的同步任务执行完了，读取消息队列，把异步任务进入执行栈执行。异步任务是在后续同步任务执行完后再入栈的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20230408112252825.png"></p><p>首先同步任务中for循环中i增加到了3，但是<code>setTimeout</code>表示<code>console.log(i)</code>这个函数是异步的，往消息队列中插入这个任务。继续执行<code>console.log(22)</code>，现在同步任务执行完成，从消息队列中读取异步任务，现在才打印i&#x3D;3.</p><h3 id="回调函数解决"><a href="#回调函数解决" class="headerlink" title="回调函数解决"></a>回调函数解决</h3><p>我们可以通过回调函数解决异步编程问题，<strong>回调函数指的是一个函数作为参数传递给另一个函数，当需要时另一个函数才调用它</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 先干自己的事 等到需要回调函数再调用</span>    <span class="token keyword">const</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token comment">// 现在调用回调函数</span>    <span class="token function">callback</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> print<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>回调函数会出现回调地狱的问题，即回调中嵌套多层回调。promise可以解决回调地狱的问题，以更加清晰的逻辑写好异步编程。promise有3个状态，pending,resolved,rejected.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//基本模型</span><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>promise构造函数接受一个函数作为参数，该函数是同步的并且会被立即执行。它有两个参数，resolve表示promise成功的状态，reject表示promise失败的状态。</p><p>promise中的方法：</p><ul><li>then：异步操作成功时的回调函数</li><li>catch：异步操作失败时的回调函数</li><li>finally:无论成功失败都会执行的回调函数</li></ul><p>如果异步操作成功resolve通知then执行成功的回调函数，如果失败reject通知catch执行失败的回调函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> p<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span>reject</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token comment">//这里是异步操作</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里处理成功 传递给then方法</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      <span class="token function">reject</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里处理错误的 传递给catch方法</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//成功的回调函数 成功就输出TRUE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//失败的回调函数 失败就输出false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'the end'</span><span class="token punctuation">)</span> <span class="token comment">//最后一点会输出the end</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a>async和await</h3><p>async和await对promise进一步简化，可以用同步的方式写异步代码。</p><p>使用了asnyc之后标明这是一个异步函数，异步函数使用return返回值会被promise.resolve()包装成一个promise对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//async放在函数前面 函数返回的是一个promise对象 简化对promise对象的创建</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"简化promise写法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> a<span class="token operator">=</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这里返回是一个promise对象</span><span class="token comment">// async相当于下面的写法</span><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"原来写法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> b<span class="token operator">=</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>await会暂停异步函数中后面的代码，等到await右边的值可用再继续执行await下面的操作。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> x<span class="token operator">=</span><span class="token keyword">await</span> <span class="token number">3</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//在await的时候会暂停，退出了a，执行完下一句再返回执行console.log(x)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"在await的时候退出了函数a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1</span><span class="token comment">// 2</span><span class="token comment">// 在await的时候退出了函数a</span><span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>await关键字要和async一起使用，原来异步函数返回的是一个promise对象，但是使用了await之后可以取到promise对象中的值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"简化promise写法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// await必须和async一起使用</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result<span class="token operator">=</span><span class="token keyword">await</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"使用await"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20230320224404784.png" alt="image-20230320224404784"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"简化promise写法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">22</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// await必须和async一起使用</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> result<span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"不使用await"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20230320224514595.png" alt="image-20230320224514595"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异步编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向和闭包</title>
      <link href="/2023/03/20/this-zhi-xiang-he-bi-bao/"/>
      <url>/2023/03/20/this-zhi-xiang-he-bi-bao/</url>
      
        <content type="html"><![CDATA[<center><font size=6>js学习</font></center><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><p>在普通函数中和箭头函数中this指向会有所不同。</p><p>在普通函数中this指的是<strong>调用函数的作用域</strong>，而在箭头函数中没有自己的this，它的this指向<strong>上一级作用域的this</strong>。</p><p>1.普通函数</p><p>谁调用指向谁</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 这里是a调用了say函数，this指向a</span>    <span class="token keyword">const</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>      <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    a<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>独立调用指向window</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a</span>        <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span>        <span class="token punctuation">&#125;</span>        <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//独立调用了b</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>a<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.箭头函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 箭头函数this指向上一级作用域的this</span><span class="token comment">// 对象没有作用域 say的上一级是对象o o没有作用域只能指向window</span>    <span class="token keyword">const</span> o<span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>      <span class="token function-variable function">say</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//window</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    o<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//指向obj foo由obj调用 指向obj</span>      <span class="token function-variable function">test</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  <span class="token comment">//指向obj 上一级作用域的this 即foo作用域中的this</span>      <span class="token punctuation">&#125;</span>      <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      foo<span class="token operator">:</span> foo    <span class="token punctuation">&#125;</span>obj<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包指的是<strong>引用了另一个函数作用域中的变量的函数</strong>。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 这里闭包应该指的是内部的匿名函数，a[name]和b[name]引用了外部函数的作用域变量name</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">-</span>b<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'Mozilla'</span>    <span class="token keyword">function</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">alert</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> displayName  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> myFunc <span class="token operator">=</span> <span class="token function">makeFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//通过return就可以使用到函数内部的变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 闭包 </tag>
            
            <tag> this指向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目部署</title>
      <link href="/2022/11/19/xiang-mu-bu-shu/"/>
      <url>/2022/11/19/xiang-mu-bu-shu/</url>
      
        <content type="html"><![CDATA[<p>最近跟着网上教学做了一个vue项目，后端不是我写的。做完后想要部署到服务器上，在网上找了很多教程，最后终于搞定了。这是第一次部署，记录一下。（这里用到的是宝塔，我是把前端后端部署到同一服务器的不同端口）</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>首先把数据库文件导出，这里是Navicat，如图所示选中所要的数据库点击结构和数据进行导出。（我这里导出的数据库文件没有内容，不知道为什么，所以我用了网上教学素材）</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119224727876.png"></p><p>然后打开宝塔面板，点击数据库进行创建，点击添加数据库</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119225020075.png"></p><p>填写名称和密码</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119225420090.png"></p><p>导入数据库文件，从本地上传文件后导入</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119225545425.png"></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119225653913.png"></p><h3 id="部署后端"><a href="#部署后端" class="headerlink" title="部署后端"></a>部署后端</h3><p>配置好数据库后要把后端和数据库连接起来。这里的后端程序我是直接拿别人打包好的，我自己还不会写。</p><p>在目录下新建一个文件夹</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119230041681.png"></p><p>然后把打包好的文件上传，.jar文件就是打包好的后端文件，application.properties是后端配置文件</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119230158536.png"></p><p>打开application.properties文件进行端口配置和连接数据库</p><p><strong>注意：所有用到的端口都要在服务器和宝塔中放行</strong></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119230824745.png"></p><p>现在我们只需要将jar文件跑起来就行了，打开终端，执行下面的命令就可以把后台运行起来</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119231158606.png"></p><p>但是当我们关闭终端时，运行的jar文件也会被终止，所以在网上看到了这样的做法.先执行第一条语句，回车然后再exit，我们可以看到在目录下多出了一个nohup.out文件。这个就是记录jar不断运行的文件。</p><pre class="line-numbers language-none"><code class="language-none">nohup java -jar easyblog-1.0.0.jar &amp;exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119231802493.png"></p><p>这时我们可以用ip+后端运行端口号进行访问一下，ip+8082,出现下面的情况说明后台已经运行</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119232206446.png"></p><p>这是没有运行的端口号</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119232336688.png"></p><hr><p>如果你执行了上面的命令但是后台没有运行，可能是防火墙的原因，我们需要关闭防火墙。（没有请跳过）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status firewalld <span class="token comment">#查看防火墙状态</span>systemctl stop firewalld <span class="token comment">#禁用防火墙</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>出现下面的情况说明已经关闭防火墙</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119233340116.png"></p><h3 id="部署vue项目"><a href="#部署vue项目" class="headerlink" title="部署vue项目"></a>部署vue项目</h3><p>先来看一下vite.config.js文件，这里配置了连接后台接口</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119234417130.png"></p><p>在main.js中统一了图片的URL，这里原来写的时候没有前面ip地址<code>/api/file/getImage/</code>，但是部署到服务器上就请求接口变成了<code>ip:8081/api/file/getImage/</code>，不是8082端口拿不到图片。于是我就在前面加了ip地址。（注意：一定要在前面加http）</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119235434208.png"></p><p>进入到你的项目，终端执行<code>npm run build</code>命令进行打包，打包后在根目录下多出一个dist目录（我这里用的是vite，vue-cli打包生成的文件名会不同）。把打包文件上传到宝塔</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221119235912753.png"></p><p>点进dist目录，把里面的文件剪切到根目录easyblog下面。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221120000047680.png"></p><p>宝塔添加站点</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221120000209319.png"></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221120000652408.png"></p><p>添加了站点后在进行修改，我是没有购买域名，所以用ip进行代替。原来默认是80端口，这里修改为8081端口</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221120000758878.png"></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221120001027095.png"></p><p>点击配置文件，这里是网页运行端口号</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221120001324416.png"></p><p>然后在配置文件中添加如下配置</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221120001619184.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location / <span class="token punctuation">&#123;</span>      try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html<span class="token punctuation">;</span> <span class="token comment">#这个很重要</span>     index  index.html index.htm<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    location /api <span class="token punctuation">&#123;</span>       proxy_redirect    off<span class="token punctuation">;</span>      proxy_set_header  Host <span class="token variable">$host</span><span class="token punctuation">;</span>      proxy_set_header  X-real-ip <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>      proxy_pass http://localhost:8082/api<span class="token punctuation">;</span> <span class="token comment">#所有/api都变为请求8082后台端口</span>      proxy_set_header x-forwarded-for  <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此就可以用<code>ip:8081</code>进行网站访问了</p>]]></content>
      
      
      <categories>
          
          <category> 技能学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3中遇到的问题</title>
      <link href="/2022/10/31/vue3-xiang-mu-yu-dao-de-wen-ti/"/>
      <url>/2022/10/31/vue3-xiang-mu-yu-dao-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在看视频跟着做一个<a href="https://www.bilibili.com/video/BV1Lg411a7N5">博客项目</a>，这过程中遇到了不少的问题，由此记录一下。注意：这里的后台不是我所写，是UP主打包好的，以我目前的能力还写不出来。</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p>登录功能如下：首先有一个表单叫你输入账号密码，当你点击记住账号密码时会把你的信息存在Cookies中，下次再登录会从Cookies中获取账号密码，自动填到表单中。我们用到了md5进行密码的加密，不然别人可以从数据库或者Cookies中看到你的明文密码。(这个项目配合element plus一起使用)</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221114181647291.png"></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221114184150563.png"></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div class&#x3D;&quot;login-container&quot;&gt;      &lt;div class&#x3D;&quot;login-form&quot;&gt;          &lt;div class&#x3D;&quot;txt&quot;&gt;用户登录&lt;&#x2F;div&gt;          &lt;el-form :model&#x3D;&quot;formData&quot; :rules&#x3D;&quot;rules&quot; ref&#x3D;&quot;ruleFormRef&quot;&gt;              &lt;el-form-item prop&#x3D;&quot;account&quot;&gt;                  &lt;el-input v-model&#x3D;&quot;formData.account&quot; placeholder&#x3D;&quot;请输入账号&quot; &gt;                      &lt;!-- 插槽 --&gt;                      &lt;template #prefix&gt;                          &lt;!-- 这下面的iconfont是阿里云图标 官网下载压缩包放到静态文件下--&gt;                          &lt;span class&#x3D;&quot;iconfont icon-account&quot;&gt;&lt;&#x2F;span&gt;                      &lt;&#x2F;template&gt;                  &lt;&#x2F;el-input&gt;              &lt;&#x2F;el-form-item&gt;              &lt;el-form-item  prop&#x3D;&quot;password&quot;&gt;                  &lt;el-input v-model&#x3D;&quot;formData.password&quot; placeholder&#x3D;&quot;请输入密码&quot; type&#x3D;&quot;password&quot;&gt;                      &lt;template #prefix&gt;                          &lt;span class&#x3D;&quot;iconfont icon-password&quot;&gt;&lt;&#x2F;span&gt;                      &lt;&#x2F;template&gt;                  &lt;&#x2F;el-input&gt;              &lt;&#x2F;el-form-item&gt;              &lt;el-form-item prop&#x3D;&quot;checkCode&quot;&gt;                  &lt;div id&#x3D;&quot;check-code&quot;&gt;                      &lt;el-input v-model&#x3D;&quot;formData.checkCode&quot; placeholder&#x3D;&quot;请输入验证码&quot; @keyup.enter.native&#x3D;&quot;login&quot;&gt;&lt;&#x2F;el-input&gt;                  &lt;img :src&#x3D;&quot;checkCodeUrl&quot; alt&#x3D;&quot;&quot; class&#x3D;&quot;code&quot; @click&#x3D;&quot;changeCheckCode&quot;&gt;                  &lt;&#x2F;div&gt;              &lt;&#x2F;el-form-item&gt;              &lt;el-form-item class&#x3D;&quot;remember&quot; prop&#x3D;&quot;rememberMe&quot;&gt;                  &lt;el-checkbox true-label&#x3D;true v-model&#x3D;&quot;formData.rememberMe&quot;&gt;记住我&lt;&#x2F;el-checkbox&gt;              &lt;&#x2F;el-form-item&gt;              &lt;el-form-item &gt;                  &lt;el-button class&#x3D;&quot;login-btn&quot; type&#x3D;&quot;primary&quot; @click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;el-button&gt;              &lt;&#x2F;el-form-item&gt;          &lt;&#x2F;el-form&gt;      &lt;&#x2F;div&gt;  &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script setup&gt;import md5 from &#39;js-md5&#39; &#x2F;&#x2F;加密密码import &#123;ElMessage&#125; from &#39;element-plus&#39;import &#123;getCurrentInstance, reactive, ref&#125; from &#39;vue&#39;import &#123;useRouter&#125; from &#39;vue-router&#39;import Cookies from &#39;vue-cookies&#39;const &#123;proxy&#125; &#x3D; getCurrentInstance()const router&#x3D;useRouter()const api&#x3D;&#123;    &#x2F;&#x2F; 接口    checkCode: &#39;api&#x2F;checkCode&#39;,    login: &#39;&#x2F;login&#39;&#125;const formData&#x3D;reactive(&#123;&#125;) &#x2F;&#x2F;存放表单数据&#x2F;&#x2F;这里是验证规则const rules&#x3D;reactive(&#123;    account:[        &#123; required: true, message: &#39;请输入账号&#39;,trigger: &#39;change&#39; &#125;,    &#123; min: 1, max: 15, message: &#39;长度在1到15&#39;,trigger: &#39;change&#39; &#125;,    ],    password: [        &#123; required: true, message: &#39;请输入密码&#39;&#125;,    &#123; min: 8,  message: &#39;至少8位&#39;,trigger: &#39;blur&#39; &#125;,    ],    checkCode: [        &#123;required: true,message: &#39;请输入验证码&#39;,trigger: &#39;change&#39; &#125;    ]&#125;)&#x2F;&#x2F;显示登录界面进行初始化 如果Cookies中有记录就把Cookies中的信息填到表单中 如果没有就说明是新用户登录，或者用户没有点击记住我const init&#x3D;()&#x3D;&gt;&#123;    let loginInfo&#x3D;Cookies.get(&#39;loginInfo&#39;)    if(!loginInfo) &#123;        return &#x2F;&#x2F;没记住登录信息    &#125;    &#x2F;&#x2F; 记住的话就填上去    Object.assign(formData,loginInfo)&#125;init()const ruleFormRef&#x3D;ref(null)&#x2F;&#x2F; 提交时进行表单验证&#x2F;&#x2F; 初始化后如果Cookies中有信息就会填到表单中，将Cookies中的密码和表单中的密码进行比较，不相等说明是新输入的 进行加密，相等可以直接拿表单中的信息进行登录。点击登录要把账号密码存到Cookies中const login&#x3D;()&#x3D;&gt;&#123;    ruleFormRef.value.validate(async(valid)&#x3D;&gt;&#123;        if(!valid)&#123;            return        &#125;        const CookiesLoginInfo&#x3D;Cookies.get(&#39;loginInfo&#39;)        const CookiesPassword&#x3D;CookiesLoginInfo&#x3D;&#x3D;null?null:CookiesLoginInfo.password        &#x2F;&#x2F;拿到Cookies中的密码 和现在表单中的密码进行比较         if(formData.password!&#x3D;CookiesPassword) &#123; &#x2F;&#x2F;不相等说明是新输入的，进行加密 相等直接登录            formData.password&#x3D;md5(formData.password)        &#125;        let params&#x3D;&#123;                account: formData.account,                password: formData.password,                checkCode: formData.checkCode            &#125;        const result&#x3D;await proxy.request(&#123;            url: api.login,            params,            errorCallback:()&#x3D;&gt;&#123;                changeCheckCode()            &#125;        &#125;)        if(!result) &#123;            return        &#125;        ElMessage.success(&#39;登录成功&#39;)        setTimeout(()&#x3D;&gt;&#123;            router.push(&#39;&#x2F;&#39;)        &#125;,1000)        const loginInfo&#x3D;&#123;            account: formData.account,            password: formData.password,            rememberMe: formData.rememberMe        &#125;        Cookies.set(&#39;userInfo&#39;,result.data,0) &#x2F;&#x2F;保存返回的信息永不过期        &#x2F;&#x2F; 记住登录信息        if(formData.rememberMe) &#123;            Cookies.set(&#39;loginInfo&#39;,loginInfo,&#39;7d&#39;)&#x2F;&#x2F;保留7天        &#125;    &#125;)&#125;&#x2F;&#x2F; 这里是验证码const checkCodeUrl&#x3D;ref(api.checkCode)const changeCheckCode&#x3D;()&#x3D;&gt;&#123;    checkCodeUrl.value &#x3D;api.checkCode+&#39;?&#39;+new Date().getTime()&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="父组件和子组件的传递"><a href="#父组件和子组件的传递" class="headerlink" title="父组件和子组件的传递"></a>父组件和子组件的传递</h3><h4 id="父向子传值"><a href="#父向子传值" class="headerlink" title="父向子传值"></a>父向子传值</h4><p>这里是想点击父组件中的按钮让子组件显示出来，原来子组件是不显示的。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/%E7%A9%BA%E7%99%BD.png"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comeOn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 传入的参数 子组件是否显示--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">:show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>son.show<span class="token punctuation">'</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Son</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>reactive<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>    <span class="token comment">//这里要用reactive </span><span class="token keyword">const</span> son<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">comeOn</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        son<span class="token punctuation">.</span>show<span class="token operator">=</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//这里设置属性 父组件使用时要传入的参数</span><span class="token keyword">const</span> props<span class="token operator">=</span><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="子向父传递方法"><a href="#子向父传递方法" class="headerlink" title="子向父传递方法"></a>子向父传递方法</h4><p>子组件是一个弹窗，有一个关闭按钮，当点击关闭按钮时就把弹窗关掉</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/%E7%A9%BA%E7%99%BD.png"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//父组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>comeOn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 传入的参数 子组件是否显示--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">:show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>son.show<span class="token punctuation">'</span></span> <span class="token attr-name">@closeDialog</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>close<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Son</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>reactive<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> son<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">comeOn</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        son<span class="token punctuation">.</span>show<span class="token operator">=</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token function-variable function">close</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        son<span class="token punctuation">.</span>show<span class="token operator">=</span><span class="token boolean">false</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//子组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//这里设置属性 父组件使用时要传入的参数</span><span class="token keyword">const</span> props<span class="token operator">=</span><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//定义emit用来传递</span>    <span class="token keyword">const</span> emit<span class="token operator">=</span><span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'closeDialog'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">close</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">//这里将方法传递给父组件</span>        <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'closeDialog'</span><span class="token punctuation">)</span> <span class="token comment">//父组件中的接受方法也要是这个名字</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="grandPa通过子组件让grandSon显示"><a href="#grandPa通过子组件让grandSon显示" class="headerlink" title="grandPa通过子组件让grandSon显示"></a>grandPa通过子组件让grandSon显示</h4><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/a.png"></p><p>在祖父中有一个按钮，点击这个按钮让孙子显示，但是孙子中的参数是父亲传入的，这里需要在父亲中定义一个方法然后暴露给祖父，祖父调用这个方法改变参数。defineExpose将方法或者属性暴露出去。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//grandpa组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>确定<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- ref可以获取这个组件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Father</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>showRef<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Father</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span>    <span class="token keyword">const</span> showRef<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//需要定义一个ref</span>    <span class="token keyword">const</span> <span class="token function-variable function">show</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token comment">//点击祖父的按钮 调用父的方法改变值</span>        showRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">comeOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//father组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Son</span> <span class="token attr-name">:show</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>son.show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Son</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>reactive<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> son<span class="token operator">=</span><span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//这里定义一个方法 可以改变参数</span>    <span class="token keyword">const</span> <span class="token function-variable function">comeOn</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        son<span class="token punctuation">.</span>show<span class="token operator">=</span><span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token function">defineExpose</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>comeOn<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//结构 只是将这个方法暴露</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">//son组件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        son组件    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token comment">//这里设置属性 父组件使用时要传入的参数</span><span class="token keyword">const</span> props<span class="token operator">=</span><span class="token function">defineProps</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">show</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="不同组件共享数据"><a href="#不同组件共享数据" class="headerlink" title="不同组件共享数据"></a>不同组件共享数据</h3><p>两个没有关系的组件之间怎么共用同一个数据呢？可以使用vuex来管理，先在项目中安装依赖包<code>npm i vuex</code>，然后在src目录下新建一个store文件夹，在其中新建index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>createStore<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">// 创建一个store实例 可以通过他在不同组件中进行数据传输</span><span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 这里放组件共享的数据 相当一个仓库所有组件可以从这里拿数据</span>    <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">userInfo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">avatar</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token literal-property property">nickName</span><span class="token operator">:</span> <span class="token string">''</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 第一个参数一定是state 第二个参数是传进来的</span>        <span class="token function">updateUserInfo</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>userInfo</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            state<span class="token punctuation">.</span>userInfo<span class="token operator">=</span>userInfo        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在main.js文件中引入这个文件并使用</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store/index.js'</span><span class="token keyword">const</span> app<span class="token operator">=</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设在A组件中改变了某个数据，要同步到B组件中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//这里是A组件的script</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>useStore<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function">changeData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">// 改变了数据 提交到store 注意第一个参数要和mutations中一样</span>    store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateUserInfo'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">avatar</span><span class="token operator">:</span>formData<span class="token punctuation">.</span>value<span class="token punctuation">.</span>avatar<span class="token punctuation">,</span><span class="token literal-property property">nickName</span><span class="token operator">:</span>formData<span class="token punctuation">.</span>value<span class="token punctuation">.</span>nickName<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//这里是B组件的script</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>useStore<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> store<span class="token operator">=</span><span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//当数据发生改变时监听数据 要用watch才能拿到更新后的值</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>userInfo<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newVal<span class="token punctuation">,</span>oldVal</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> avatar<span class="token operator">=</span>newVal<span class="token punctuation">.</span>avatar <span class="token comment">//拿到更新后的值</span>  <span class="token keyword">const</span> nickName<span class="token operator">=</span>newVal<span class="token punctuation">.</span>nickName<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">immediate</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">deep</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nextTick的使用"><a href="#nextTick的使用" class="headerlink" title="nextTick的使用"></a>nextTick的使用</h3><p>总是遇到nextTick，但是不知道为什么要使用他，网上搜了一下：<strong>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</strong>。就是说在更新了数据之后要调用这个方法才能得到最新的数据。</p><p>经常遇到这样一个使用场景：在清除表单的时候总是要在<code>nextTick(()=&gt;&#123;&#125;)</code>进行。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>showForm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-form</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>formRef<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>ref<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> formRef<span class="token operator">=</span><span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//通过formRef.value可以拿到表单这个dom</span><span class="token comment">// ！！！因为点击按钮才出现表单，表单是后面出现的，要用nextTick等到表单这个dom加载完才能得到value</span><span class="token keyword">const</span> <span class="token function-variable function">showForm</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token comment">//formRef.value.resetFields() 这样是错误的 这时formRef.value是undifine</span>    <span class="token function">nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        formRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">resetFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//首先进行表单的清空 </span>        <span class="token comment">//下面在进行其他操作</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="axios封装"><a href="#axios封装" class="headerlink" title="axios封装"></a>axios封装</h3><p>一个项目中要用到接口，但是每次都直接调用axios代码变得冗余，原来的axios：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">'填写url'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">//超时</span>    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded;charset=UTF-8'</span><span class="token punctuation">,</span> <span class="token comment">//这里是表单格式 不同格式有不同</span>        <span class="token string-property property">'X-Requested-With'</span><span class="token operator">:</span> <span class="token string">'XMLHttpRequest'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次调用都要这样写非常麻烦，所以我们要对axios进行封装，在src目录下新建文件</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221113125557979.png"></p><p>文件如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">const</span> contentTypeForm<span class="token operator">=</span><span class="token string">"application/x-www-form-urlencoded;charset=UTF-8"</span> <span class="token comment">//表单</span><span class="token keyword">const</span> contentTypeJson<span class="token operator">=</span><span class="token string">"application/json"</span> <span class="token comment">//json格式</span><span class="token keyword">const</span> contentTypeFile<span class="token operator">=</span><span class="token string">"multipart/form-data"</span> <span class="token comment">//文件</span><span class="token comment">// 这里封装一下axios 要不然每次使用都要调用axios 代码很多</span><span class="token keyword">const</span> <span class="token function-variable function">request</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">//传递的参数</span>    <span class="token keyword">let</span> <span class="token punctuation">&#123;</span>url<span class="token punctuation">,</span>params<span class="token punctuation">,</span>dataType<span class="token operator">=</span><span class="token string">'form'</span><span class="token punctuation">,</span>showLoading<span class="token operator">=</span><span class="token string">'true'</span><span class="token punctuation">&#125;</span><span class="token operator">=</span>config <span class="token comment">//解构出这些参数</span>    <span class="token keyword">let</span> contentType<span class="token operator">=</span>contentTypeForm <span class="token comment">//默认上传表单</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dataType<span class="token operator">===</span><span class="token string">'json'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        contentType<span class="token operator">=</span>contentTypeJson    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dataType<span class="token operator">===</span><span class="token string">'file'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//上传对象</span>        contentType<span class="token operator">=</span>contentTypeFile        <span class="token comment">// 对文件进行处理 利用formData对象把文件和额外参数加入</span>        <span class="token keyword">let</span> param<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            param<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        params<span class="token operator">=</span>param    <span class="token punctuation">&#125;</span>    <span class="token comment">// 每次发送请求都创建axios实例</span>    <span class="token keyword">const</span> instance<span class="token operator">=</span>axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">'/api'</span><span class="token punctuation">,</span> <span class="token comment">//这里设置基地址 网上看到好像生产、发布阶段可以设置不同的URL</span>        <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token comment">//超时时间</span>        <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token comment">//头部信息</span>            <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> contentType<span class="token punctuation">,</span> <span class="token comment">//上传不同格式文件有不同</span>            <span class="token string-property property">'X-Requested-With'</span><span class="token operator">:</span> <span class="token string">'XMLHttpRequest'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> loading<span class="token operator">=</span><span class="token keyword">null</span> <span class="token comment">//页面有一个加载效果</span>    <span class="token comment">// 请求拦截器 发送请求进行一些处理后再发送 处理回调函数,错误回调函数</span>    instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>showLoading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> config <span class="token comment">//一定要返回 不然报错</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span> <span class="token comment">//错误处理</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    <span class="token comment">// 响应拦截器 对服务器返回结果进行处理</span>    instance<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> response        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span>    <span class="token comment">// 发送请求捕捉错误 可以另外写一个文件封装</span>    <span class="token keyword">return</span> instance<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//出现了什么错误</span>        <span class="token keyword">return</span> <span class="token keyword">null</span> <span class="token comment">//返回一个空对象</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> request<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在main.js文件中引入</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> createApp <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> <span class="token string">'./style.css'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'./utils/request'</span><span class="token keyword">const</span> app<span class="token operator">=</span><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">.</span>globalProperties<span class="token punctuation">.</span>request<span class="token operator">=</span>requestapp<span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件中使用</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script setup&gt;import &#123;getCurrentInstance&#125; from &#39;vue&#39;const &#123;proxy&#125; &#x3D; getCurrentInstance()const sbumit&#x3D;async()&#x3D;&gt;&#123;    const result&#x3D;await proxy.request(&#123;            url: &#39;地址&#39;,            params: &#123;&#x2F;&#x2F;参数                            &#125;        &#125;)&#125;&lt;&#x2F;script&gt;&lt;template&gt;  &lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;style scoped&gt;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题修改</title>
      <link href="/2022/10/11/zhu-ti-xiu-gai/"/>
      <url>/2022/10/11/zhu-ti-xiu-gai/</url>
      
        <content type="html"><![CDATA[<p>最近折腾了一下怎么搭建博客，记录一下吧。这里用的是hexo框架搭建的，主题为matery，整个搭建过程都是一边看着网上的教程弄的，但是有些地方是弄了很久才弄出来的，这里只是记录一下修改的过程，搭建和部署到GitHub上网上就有很多。</p><h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><p>在根目录下有一个名为<code>_config.yml</code>的文件，在里面可以修改主页的标题等。<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011105118770.png"></p><p>然后在<code>themes</code>下也有一个<code>_config.yml</code>的文件，在这面是修改主题相关的部分。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011105425467.png"></p><h3 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h3><p>在<code>_config.yml</code>文件中有一个轮换图是否开启，我把他设置为了false<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011110208423.png"></p><p>然后在layout文件夹中的_partial中的bg-cover-content.ejs文件中可以设置轮换的图片，原来我想设置为两边有箭头可以手动轮换的，但是不知道怎么做，于是就把上面设置为false然后把图中的图片换为自己的了。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011111006408.png"></p><p>其实还可以设置背景图，原来背景是没有的只是纯色，上面更换的只是轮播图。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011111407726.png"></p><p>找到themes下的source中的css文件夹中的matery，在里面可以修改整个主题的样式，ctrl+f5搜索body可以定位到body样式，把他修改为如下（这里我也是在网上找的）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* background-color: #eaeaea;    margin: 0;    color: #34495e;    overflow-x: hidden;    overflow-y: auto; */</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>60deg<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 165<span class="token punctuation">,</span> 150<span class="token punctuation">,</span> 0.8<span class="token punctuation">)</span> 5%<span class="token punctuation">,</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 228<span class="token punctuation">,</span> 255<span class="token punctuation">,</span> 0.35<span class="token punctuation">)</span><span class="token punctuation">)</span> 0% 0% / cover<span class="token punctuation">,</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"../medias/cover.jpg"</span><span class="token punctuation">)</span></span> 0px 0px<span class="token punctuation">;</span>    <span class="token comment">/* background: linear-gradient(60deg, rgba(255, 165, 150, 0.8) 5%, rgba(0, 228, 255, 0.35)) 0% 0% / cover,  url("https://ae01.alicdn.com/kf/H21b5f6b8496141a1979a33666e1074d9x.jpg") 0px 0px; */</span>    <span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #7F95D1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图标链接"><a href="#图标链接" class="headerlink" title="图标链接"></a>图标链接</h3><p>在右上角中有一个GitHub的图标，我觉得不好看就把他去掉了。同样在_partial文件中的header.ejs中把下面注释掉</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011112413518.png"></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011112338263.png"></p><p>在轮播图中也有很多链接，你可以在主题中的_config.yml文件中修改</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011112658327.png"></p><h3 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h3><p>原来我也没怎么注意，有个舍友说滚动条太丑了，于是就在网上找了修改方法。在matery.css文件中加上下面的代码就可以修改滚动条</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 滚动条颜色 */</span><span class="token selector">::-webkit-scrollbar-thumb</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #c6ef65<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 滚动条的背景颜色 */</span><span class="token selector">::-webkit-scrollbar-track</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #ffcacaff<span class="token punctuation">;</span>    <span class="token property">border-radius</span><span class="token punctuation">:</span> 3em<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 滚动条的大小 */</span><span class="token selector">::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="底部"><a href="#底部" class="headerlink" title="底部"></a>底部</h3><p>在_partial文件夹中footer.ejs可以修改底部，我把hexo和主题链接去掉了<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011130229482.png"></p><p>统计访问人数在themes文件夹下面的_config.yml可以修改<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011150735395.png"></p><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>在手机上的样式会有一点不一样，手机上的菜单变为侧边了，多了一个GitHub链接<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221012195757421.png"></p><p>这个是在_partial下的mobile-nav.ejs里面进行修改的，我不想要就把他注释掉了<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221012200053250.png"></p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>原来的搜索功能是不能用的，要下载插件才能使用，打开终端执行如下命令：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-generator-search<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在根目录下的_config.yml文件中添加如下的代码</p><pre class="line-numbers language-none"><code class="language-none">search:  path: search.xml  field: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="文章字数统计"><a href="#文章字数统计" class="headerlink" title="文章字数统计"></a>文章字数统计</h3><p>发布文章可以看到时间和字数等<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011152314143.png"></p><p>在终端中输入如下命令：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在themes文件夹中修改_config.yml文件，ctrl+f5查找wordcount进行修改</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">postInfo</span><span class="token punctuation">:</span>  <span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 发布日期</span>  <span class="token key atrule">update</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 更新日期</span>  <span class="token key atrule">wordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章字数统计</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 站点总文章字数</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 文章阅读时长</span>  <span class="token key atrule">readCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 文章阅读次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中文链接"><a href="#中文链接" class="headerlink" title="中文链接"></a>中文链接</h3><p>好像说文章发布会生成的链接中会出现中文，可以通过插件hexo-permalink-pinyin将中文改为拼音，终端输入如下命令：</p><pre class="line-numbers language-none"><code class="language-none">npm install hexo-permalink-pinyin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在根目录下_config.yml文件添加如下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h3><p>订阅功能要配合插件hexo-generator-feed进行使用，终端中执行如下命令：</p><pre class="line-numbers language-none"><code class="language-none">npm i hexo-generator-feed<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在根目录下的_config.yml文件添加如下配置：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 订阅</span><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">' '</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><p>原来是只有首页可以使用，头部中的其他页面是要自己创建的（实现代码别人已经写好，只要一两句简单代码就可）<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011154509445.png"></p><p>新建标签页:在终端中执行如下命令:</p><pre class="line-numbers language-none"><code class="language-none">hexo new page &quot;tags&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后可以在根目录下的source文件夹中看到一个tags文件夹，把index.md修改为如下:</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-10-05 19:11:26</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他页面的新建也是如此，分类categories、关于about、留言板contact、友情链接friends、还要有一个404页面</p><h3 id="留言板"><a href="#留言板" class="headerlink" title="留言板"></a>留言板</h3><p>在创建了contact页面后还不能使用留言功能，刚开始我是想用gittalk的，但是弄了没有成功。后面换为了valine，这个还是挺好弄的，在网上找教程跟着弄就好。在此过程中遇到了一些问题，首先可以在layout文件夹下面的contact.ejs文件中可以修改属性<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011192054369.png"></p><p>按照网上教程弄好之后发现留言功能在文章可以出现，友情链接也可以出现，但就是在留言板页面中没有<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011192351739.png"></p><p>找到layout文件夹下的contact文件ctrl+f5查找card找到图中的地方添加红色部分的代码，这样在留言板中就可以看到留言功能。<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011192735039.png"></p><p>下面来说一下QQ头像获取功能，首先在主题下的_config.yml文件中找到下面的代码，添加最后一行<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/tempsnip.png"></p><p>然后在主题下的source的libs中找到valine.min.js搜索vimg可以找到下面的代码(先格式化一下代码)<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011194531510.png"></p><p>然后往上几行可以看到如下代码：<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011194906545.png"></p><p>在他t.get(‘link’)上一行新增如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> qq_img <span class="token operator">=</span> <span class="token constant">B</span><span class="token punctuation">.</span>cdn <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> u<span class="token punctuation">.</span>default<span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'mail'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">B</span><span class="token punctuation">.</span>params              <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'mail'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'@qq.com'</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">var</span> prefix <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'mail'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">@.*</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment">//前缀</span>                <span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\d+$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span> <span class="token comment">//正则表达式</span>                <span class="token keyword">var</span> result <span class="token operator">=</span> prefix<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span> <span class="token comment">//match 是匹配的意思</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                  qq_img <span class="token operator">=</span> <span class="token string">'//q1.qlogo.cn/g?b=qq&amp;nk='</span> <span class="token operator">+</span> prefix <span class="token operator">+</span> <span class="token string">'&amp;s=100'</span>                <span class="token punctuation">&#125;</span>              <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center>**注意复制上面代码时要查看前面的字母是否和原来的相同**</center><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011195555462.png"></p><p>把原来的<code>B.cdn + (0, u.default)(t.get(&#39;mail&#39;)) + B.params</code>更换为qq_img<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011195934622.png"></p><p>填写qq邮箱之后可以看到评论中显示qq头像<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011200831806.png"></p><p>在_partial下的valine.ejs找到如下的代码进行修改，requiredFields是必填项，meta是叫你填的信息。详细内容可以到官网去看<a href="https://valine.js.org/configuration.html#meta">valine</a></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221011201015359.png"></p><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>新建文章的命令是<code>hexo new &quot;标题&quot;</code>，然后可以在根目录source下的_posts看到新建的文章，可以用typora打开这个文章进行编写。可以为文章添加tags和分类，想一个文章分在不同的分类可以设置，按照如下格式。</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> 主题修改<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2022-10-11 10:34:00</span><span class="token key atrule">tags</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> matery<span class="token punctuation">-</span> hexo<span class="token key atrule">categories</span><span class="token punctuation">:</span> <span class="token punctuation">-</span> <span class="token punctuation">[</span>随笔<span class="token punctuation">]</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a>时钟</h3><p>在网上看到一个小案例觉得蛮有趣的，就拿来挂在上面了。（一下代码都是照网上修改得来）</p><p>首先找到_partial下的index-cover.ejs文件，在所示添加HTML代码<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221016164801924.png"></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 时钟  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clock-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--clr</span><span class="token punctuation">:</span> #ff2972</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 圆点 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dots h_dot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token comment">&lt;!-- 可缩放矢量图 成为dom的一部分 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>circle</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hh<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>circle</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hours<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--clr</span><span class="token punctuation">:</span> #fee880</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dots m_dot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>circle</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>circle</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>minutes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">--clr</span><span class="token punctuation">:</span> #29ff86</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dots s_dot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>circle</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>55<span class="token punctuation">"</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ss<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>circle</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>00<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- 时钟结束 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>$(function () &#123;&#125;)</code>的后面添加js代码<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20221016163726875.png"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 时钟</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> hours <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hours'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> minutes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'minutes'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> seconds <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'seconds'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 小于10前面+0</span>        h <span class="token operator">=</span> h <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> h <span class="token operator">:</span> h        m <span class="token operator">=</span> m <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> m <span class="token operator">:</span> m        s <span class="token operator">=</span> s <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> s <span class="token operator">:</span> s        hours<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> h<span class="token operator">+</span><span class="token string">"&lt;br>&lt;span>Hours&lt;/sapn>"</span>        minutes<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> m<span class="token operator">+</span><span class="token string">"&lt;br>&lt;span>Minutes&lt;/sapn>"</span>        seconds<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> s<span class="token operator">+</span><span class="token string">"&lt;br>&lt;span>Seconds&lt;/sapn>"</span>        <span class="token keyword">let</span> hh<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'hh'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> mm<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'mm'</span><span class="token punctuation">)</span>        <span class="token keyword">let</span> ss<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'ss'</span><span class="token punctuation">)</span>        <span class="token comment">// 这里的315要和css中的315相同</span>        hh<span class="token punctuation">.</span>style<span class="token punctuation">.</span>strokeDashoffset<span class="token operator">=</span><span class="token number">315</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">315</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">24</span>        mm<span class="token punctuation">.</span>style<span class="token punctuation">.</span>strokeDashoffset<span class="token operator">=</span><span class="token number">315</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">315</span><span class="token operator">*</span>m<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span>        ss<span class="token punctuation">.</span>style<span class="token punctuation">.</span>strokeDashoffset<span class="token operator">=</span><span class="token number">315</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">315</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">60</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在最后添加css样式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;!-- 时钟 -->&lt;style>    .clock-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token comment">/* justify-content: center;    align-items: center; */</span>    <span class="token comment">/* background-color: transparent; */</span><span class="token punctuation">&#125;</span><span class="token selector">#time</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token comment">/* gap: 40px; */</span>    <span class="token property">z-index</span><span class="token punctuation">:</span> 9<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> 70px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#time .circle</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">justify-self</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#time .circle svg</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#time .circle svg circle</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">fill</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>    <span class="token property">stroke</span><span class="token punctuation">:</span> #474747<span class="token punctuation">;</span>    <span class="token property">stroke-width</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>5px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#time .circle svg circle:nth-child(2)</span> <span class="token punctuation">&#123;</span>    <span class="token property">stroke</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--clr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">stroke-dasharray</span><span class="token punctuation">:</span> 315<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#time div</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#time div span</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 0.5rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 300<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#time #hours,#time #minutes,#time #seconds</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 47px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考文章：<a href="https://www.matemaster.cn/posts/43043.html#toc-heading-1">https://www.matemaster.cn/posts/43043.html#toc-heading-1</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matery </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack介绍</title>
      <link href="/2022/10/06/webpack-jie-shao/"/>
      <url>/2022/10/06/webpack-jie-shao/</url>
      
        <content type="html"><![CDATA[<p>webpack是一个可以将项目进行规范化、将项目打包压缩的工具</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>终端使用<code>npm init -y</code>在项目中建立package.json来记录项目，使用<code>npm i webpack webpack-cli -D</code>将webpack包放到devDependencies中，在项目根目录下建立一个webpack.config.js的文件</p><p>里面有两个参数可选，development在开发的时候用打包速度快 production在发布的时候使用 可以进行压缩 体积小</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220810001403153.png"></p><p>然后再package.json中找到scripts节点，添加如下属性</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220810001609715.png"></p><p>在终端中运行<code>npm run dev</code>命令，这样项目就自动打包，将src中的index.js的文件打包放到dist中的main.js中。可以在webpack.config.js文件中配置要打包的文件和放到哪里。</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h4 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h4><p>每次修改代码都要重新执行<code>npm run dev</code>这样很麻烦，可以安装插件当代码改变是自动执行，<code>npm i webpack-dev-server -D</code>下载插件然后再package.json中dev加多一个如下配置，但是要在<a href="http://localhost:8080/%E4%B8%AD%E6%89%93%E5%BC%80%E3%80%82**%E5%B9%B6%E4%B8%94HTML%E4%B8%AD%E5%BC%95%E5%85%A5%E7%9A%84%E8%BF%9E%E6%8E%A5%E6%94%B9%E4%B8%BA/index.js**%EF%BC%8C%E8%BF%99%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%96%B0%E7%94%9F%E6%88%90%E7%9A%84index.js%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%EF%BC%8C%E4%B8%8D%E5%9C%A8%E7%A3%81%E7%9B%98%E4%B8%8A%E3%80%82">http://localhost:8080/中打开。**并且HTML中引入的连接改为/index.js**，这是因为新生成的index.js在内存中，不在磁盘上。</a></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220810164843354.png"></p><h4 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a>html-webpack-plugin</h4><p>打开网址还要点到index.html文件中才能看到页面，通过<code>npm i html-webpack-plugin</code>安装插件，然后在webpack.config.js文件中配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入构造函数</span><span class="token keyword">const</span> HtmlPlugin<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token comment">// 创建实例对象</span><span class="token keyword">const</span> htmlPlugin<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HtmlPlugin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">,</span> <span class="token comment">//指定文件</span>    <span class="token literal-property property">filename</span><span class="token operator">:</span> <span class="token string">'./index.html'</span> <span class="token comment">//生成的文件</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token comment">// development是开发  production是上线后 两个参数可以选择</span>    <span class="token comment">//development在开发的时候用打包速度快 production在发布的时候使用 可以进行压缩 体积小</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>htmlPlugin<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">//使htmlPlugin生效</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样<code>npm run dev</code>然后打开<a href="http://localhost:8080/%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%A1%B5%E9%9D%A2%E3%80%82">http://localhost:8080/就可以看到页面。</a></p><p>在module.exports中配置一个如下节点可以自动打开浏览器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 运行npm run dev自动打开浏览器</span>    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 端口号</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    <span class="token comment">// 打开浏览器时用什么域名或IP地址</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p>webpack只能处理js文件，其他不是js的文件不能处理，要通过loader进行打包处理。</p><p>所有的css,less文件不在index.html文件中引入，在index.js文件import引入，然后通过loader和webpack处理会自动引入到index.html文件中。<img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220810214101643.png"></p><p>打包css文件：<code>npm i style-loader css-loader -D</code>下载插件，然后在webpack.config.js文件中加多一个节点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token comment">// 以.css后缀结尾的文件  使用的loader 顺序不能改变</span>            <span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包less文件：<code>npm i less-loader less -D</code>，然后在webpack.config.js文件中加多一个节点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token comment">// 以.css后缀结尾的文件  使用的loader</span>            <span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包图片：<code>npm i url-loader file-loader -D</code>，然后在webpack.config.js文件中加多一个节点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token comment">// 以.css后缀结尾的文件  使用的loader</span>            <span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.less$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token literal-property property">use</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span><span class="token string">'css-loader'</span><span class="token punctuation">,</span><span class="token string">'less-loader'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">// 图片                      表示小于等于多少字节才转换为base64格式</span>            <span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.jpg|png|gif$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token string">'url-loader?limit=10000'</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理高级的ES6语法：<code>npm i babel-loader @babel/core @babel/plugin-proposal-decorators -D</code>，添加节点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 将ES6高级语法处理 除掉第三方包不用管</span><span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span><span class="token literal-property property">use</span><span class="token operator">:</span><span class="token string">'babel-loader'</span><span class="token punctuation">,</span><span class="token literal-property property">exclude</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在根目录下新建babel.config.js文件，配置如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'@babel/plugin-proposal-decorators'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">legacy</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;其实在开发中很少自己配置webpack，一般用插件一键生成的，重点在于理解&#x3D;&#x3D;</p><h4 id="进行发布"><a href="#进行发布" class="headerlink" title="进行发布"></a>进行发布</h4><p>项目完成后要将项目进行发布，在package.json中配置如下，–mode production指的是将代码压缩，然后执行<code>npm run build</code>，在根目录下出现一个dist文件夹里面是进行压缩的文件。<code>npm run dev</code>是在开发阶段使用，添加<strong>serve</strong>打包的代码会存储在内存中，build属性中没有serve，执行<code>npm run bulid</code>会在磁盘上生成dist文件夹。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220811002432483.png"></p><h4 id="source-map"><a href="#source-map" class="headerlink" title="source-map"></a>source-map</h4><p>在调试时显示出错的行号和源码行号对应不上，因此在webpack.config.js文件中配置节点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在开发阶段可以查看出错的行号</span><span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">'eval-source-map'</span><span class="token punctuation">,</span><span class="token comment">//在发布时上面的做法会显示源码 改为下面的</span><span class="token literal-property property">devtool</span><span class="token operator">:</span> <span class="token string">'nosources-source-map'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli创建项目</title>
      <link href="/2022/10/06/vue-cli-chuang-jian-xiang-mu/"/>
      <url>/2022/10/06/vue-cli-chuang-jian-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>在实际项目中都是用vue-cli进行搭建项目，不用自己配置webpack。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>使用<code>npm i @vue/cli -g</code>命令全局安装vue-cli，如果下载慢的话可以换为淘宝镜像。下载完成可以查看版本号</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817090329853.png"></p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p>在想要创建项目的目录下输入cmd，然后在终端中使用命令<code>vue create 项目名称</code></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817090031851.png"></p><p>我在终端中输入<code>vue create demo</code>然后出现了下面的选项，第一个是vue 3，第二个是vue 2，最后一个是手动配置，这里我们选择最后一个。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817090523474.png"></p><p>然后又出现了下面的选项，刚开始学习我们选中图中的两项，后面有需要再选择其他，按空格键进行选择</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817090916549.png"></p><p>后面出现下图选项，我们选择vue 2版本</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817091143760.png"></p><p>叫你选择哪个插件，这里选择less</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817091546255.png"></p><p>把选择的配置放到哪里，这里选择第一个放到一个独立的文件中</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817091701710.png"></p><p>是否选择把这次的配置保存下来，以后可以使用相同的配置</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817092223551.png"></p><p>填写一个名称，之后就会安装配置选项</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817092336121.png"></p><p>执行下面两个命令就可以将项目跑起来（可以使用vs code打开项目文件然后在终端执行<code>npm run serve</code>）</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817092850572.png"></p><p>不要关闭终端，关闭之后相当于把服务器关掉了。然后在浏览器中输入第一个local网址就可以看到项目</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220817093057572.png"></p><hr><h4 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h4><p>上面的步骤太过繁琐，并且vue-cli的速度会比较慢，现在有了更好的vite。</p><p>首先安装<code>npm i vite -g</code>进行全局安装，然后执行<code>npm create vite@latest 项目名 -- --template vue</code>就可以创建一个项目，进入目录然后执行<code>npm i</code>下载依赖包，执行<code>npm run dev</code>运行项目</p><p>在使用element-plus的时候有全部导入和按需导入，在按需导入的时候出现了一些问题，记录一下。</p><p>首先创建vite.config.js文件，然后按照官网配置，这里只是一部分。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> defineConfig <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vite'</span><span class="token keyword">import</span> vue <span class="token keyword">from</span> <span class="token string">'@vitejs/plugin-vue'</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token comment">// https://vitejs.dev/config/</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//用到的插件数组</span>  <span class="token literal-property property">server</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">hmr</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">3001</span><span class="token punctuation">,</span>    <span class="token literal-property property">strictPort</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">//false 端口被占用继续尝试下一个端口</span>    <span class="token literal-property property">cors</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//开启跨域请求</span>    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//浏览器自动开启</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:8081/'</span><span class="token punctuation">,</span> <span class="token comment">//目标代理接口</span>        <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//开启代理，本地创建一个虚拟服务器</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string-property property">'^/api'</span><span class="token operator">:</span> <span class="token string">'/api'</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'@'</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./src'</span><span class="token punctuation">)</span> <span class="token comment">//将src路径变为@</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm的使用</title>
      <link href="/2022/10/06/npm-de-shi-yong/"/>
      <url>/2022/10/06/npm-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>npm是一个包管理工具，所谓的包也就是第三方模块，好比如jQuery这些，当然我们也可以自定义模块，但是在实际应用中都是导入包来实现功能。npm是跟随着node.js的下载而有的，可以通过npm -v来查看版本号。</p><h4 id="项目新建"><a href="#项目新建" class="headerlink" title="项目新建"></a>项目新建</h4><p>在新建项目时在项目根目录用终端执行npm init -y来创建一个package.json文件，这个文件用来记录这个项目用到了哪些包，这些包都在node_modules文件中存放。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220731171811789.png"></p><h4 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h4><p>项目中由于包占用的内存太大，用git提交项目要把node_modules文件包含在gitignore中，这样就省略所用的包，只是包源码提交，从Gitee或GitHub下载项目只是源码，要在终端执行<code>npm install</code>命令就会自动下载项目所依赖的包，这样项目才能跑起来。</p><p>package.json文件中的dependencies记录了下载了哪些包和版本号，例如下面就是用到了jQuery包。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220731172100367.png"></p><h4 id="存放到Dev"><a href="#存放到Dev" class="headerlink" title="存放到Dev"></a>存放到Dev</h4><p>在开发用到的包但是在项目上线后不再使用放到devDependencies节点中，在项目上线后还要使用的就放到dependencies节点中。</p><p>使用npm i 包名 -D这样就会自动把包放到Dev节点中。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220731172943102.png"></p><h4 id="删除包"><a href="#删除包" class="headerlink" title="删除包"></a>删除包</h4><p>不使用包可以通过npm unistall 包名来删除对应的包，这样还会在dependencies中删除包的名字。</p><hr><h4 id="淘宝镜像npm"><a href="#淘宝镜像npm" class="headerlink" title="淘宝镜像npm"></a>淘宝镜像npm</h4><p>由于原来的npm下载包是在国外的服务器所以下载得比较慢，但是在国内淘宝做了一个镜像同步国外的npm，我们可以通过切换下载的镜像源为淘宝，这样就可以提高速度。</p><p>查看镜像源 <code>npm config get registry</code></p><p>将镜像源改为淘宝镜像 <code>npm config set registry=https://registry.npm.taobao.org/</code></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220731174912803.png"></p><p>将镜像源切换为国内之后下载速度就会提高。</p>]]></content>
      
      
      <categories>
          
          <category> 技能学习 </category>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的简单使用</title>
      <link href="/2022/10/06/git-de-jian-dan-shi-yong/"/>
      <url>/2022/10/06/git-de-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>Git是一个分布式版本控制系统，分布式就是每个客户端都保存版本，当然服务器上也保存版本，但是当服务器发生问题时可以从客户端得到完整版本，不用担心版本丢失。</p><hr><p>设置账号名和邮箱，在将文件提交到仓库中时需要提供账号和邮箱，记录谁干了什么。</p><pre class="line-numbers language-none"><code class="language-none">git config --global user.name &quot;账号&quot;git config --global user.email &quot;邮箱&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>与Gitee绑定</strong></p><ul><li><p>生成密钥： <code>ssh-keygen -t rsa</code> 输入之后按下三次回车</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220726230657692.png"></p></li><li><p>查看密钥： <code>cat ~/.ssh/id_rsa.pub</code></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220726230729155.png"></p></li><li><p>Gitee中的ssh公钥：登录码云，将上面的密钥复制到ssh公钥中</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220726230757326.png"></p><p>这样本地仓库就和Gitee绑定了。</p></li></ul><p>Git的仓库可以从其他服务器上克隆一个或者将本地的一个文件夹作为新的仓库。</p><ul><li><p>克隆：git clone +远程仓库地址。将Gitee中的仓库地址复制，这样就把远程仓库复制到了本地</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220726230808406.png"></p><ul><li>新的仓库：<ol><li>首先 git init 将本地仓库初始化</li><li>git remote add origin +远程仓库地址。这样本地仓库就和远程仓库关联起来</li></ol></li></ul><h4 id="Git的一些简单命令"><a href="#Git的一些简单命令" class="headerlink" title="Git的一些简单命令"></a>Git的一些简单命令</h4></li></ul><ol><li><p>将工作区文件添加到暂存区：git add +文件名 | git add .是全部文件</p></li><li><p>将暂存区文件添加到Git仓库：git commit -m “这里是对提交文件的描述，可以不写”</p></li><li><p>连接远程仓库：git remote add origin +远程仓库地址</p></li><li><p>将本地仓库中的文件提交到远程仓库(要在关联的情况下)：<code>git push origin master</code></p></li><li><p>查看状态：<code>git status | git status -s</code> 是简洁查看</p></li><li><p>查看提交记录：<code>git log</code></p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/image-20220726230814664.png"></p><p>上面划线的是提交版本ID</p></li><li><p>版本回退：</p><ul><li><code>git reset --hard head^</code> 回退到上个版本</li><li><code>git reset --hard head^^</code> 回退到上上个版本</li><li>git reset –hard +版本ID 回退到确定的版本</li></ul></li><li><p>在回退版本中查看提交记录：<code>git reflog</code></p></li><li><p>撤销工作区中修改：git checkout –文件名</p></li><li><p>取消暂存区中文件：git reset HEAD +文件名</p></li><li><p>从工作区直接到git仓库：git commit -a -m “描述”</p></li><li><p>删除文件：</p><ul><li>git rm -f 文件名   删除工作区和仓库的文件</li><li>git rm –cached 文件名   只删除仓库文件</li></ul></li><li><p>忽略文件：创建一个名为.gitignore的文件，在这个文件中定义不用提交的文件，提交时就不会提交对应的文件。</p></li><li><p>查看连接的远程仓库：<code>git remote -v</code></p></li></ol><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><p>开发项目时首先在master主分支创建自己的分支，自己负责的部分完成后将自己的分支合并到master主分支，这样每个人的工作没有相互影响。</p><ul><li>查看分支情况：git branch    前面有*的表示当前所在分支</li><li>创建分支：git branch 名字   在创建完分支后还是在master分支中</li><li>切换分支：git checkout 分支名</li><li>创建并切换分支：git checkout -b 分支名</li><li>合并分支：首先切换到master分支，然后执行git merge 分支名</li><li>删除分支：git branch -d 分支名</li><li>合并分支冲突：手动解决冲突，然后git add . 和git commit -m “解决了冲突”</li></ul><h4 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h4><ul><li>将分支提交到远程仓库：git push -u origin 分支名</li><li>查看远程分支：git remote show</li><li>将远程分支下载到本地：git checkout 分支名</li><li>删除远程分支：git push origin –delete 分支名</li></ul><h4 id="pull操作"><a href="#pull操作" class="headerlink" title="pull操作"></a>pull操作</h4><p><code>git pull</code>是从GitHub上下拉代码到本地仓库。<code>git clone</code>不也是可以从仓库中下载代码吗？这两者是有区别的，<code>git pull</code>是当你连接了仓库时可以使用，<code>git pull</code>是下拉最新的代码到本地；<code>git clone</code>是可以从所有仓库下载代码，就算你没有连接上仓库。</p><p>下面有一个<code>git pull</code>的使用场景：</p><p>如果小红和小明在同一家公司写同一个项目，他们负责项目的不同部分，小明在写代码之前要pull同步一下小红的代码才能继续写自己的。</p><p><img src="https://dong-image.oss-cn-guangzhou.aliyuncs.com/image/git%20pull.drawio.png"></p>]]></content>
      
      
      <categories>
          
          <category> 技能学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
